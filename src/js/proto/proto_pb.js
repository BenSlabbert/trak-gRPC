/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.AddProductRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.AddProductResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.BrandMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.BrandRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.BrandResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.CategoryMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.CategoryRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.CategoryResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ChartDataMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.Empty', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.LatestResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.PageRequestMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.PageResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ProductMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ProductRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ProductResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.ProductStatsResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.PromotionMessage', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.PromotionRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.PromotionResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.SearchRequest', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.SearchResponse', null, global);
goog.exportSymbol('proto.io.github.benslabbert.trak.grpc.SearchResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.Empty.displayName = 'proto.io.github.benslabbert.trak.grpc.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.Empty}
 */
proto.io.github.benslabbert.trak.grpc.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.Empty;
  return proto.io.github.benslabbert.trak.grpc.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.Empty}
 */
proto.io.github.benslabbert.trak.grpc.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.ChartDataMessage.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ChartDataMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ChartDataMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.ChartDataMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ChartDataMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.getRepeatedField(msg, 1),
    dataSetsList: jspb.Message.toObjectList(msg.getDataSetsList(),
    proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ChartDataMessage}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ChartDataMessage;
  return proto.io.github.benslabbert.trak.grpc.ChartDataMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ChartDataMessage}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    case 2:
      var value = new proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.deserializeBinaryFromReader);
      msg.addDataSets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ChartDataMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDataSetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string labels = 1;
 * @return {!Array<string>}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.addLabels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * repeated ChartDataSetMessage data_sets = 2;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage>}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.getDataSetsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage, 2));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage>} value */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.setDataSetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.addDataSets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.ChartDataMessage.prototype.clearDataSetsList = function() {
  this.setDataSetsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fillColor: jspb.Message.getFieldWithDefault(msg, 2, ""),
    strokeColor: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pointColor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pointStrokeColor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pointHighlightFill: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pointHighlightStroke: jspb.Message.getFieldWithDefault(msg, 7, ""),
    dataList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage;
  return proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFillColor(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrokeColor(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointColor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointStrokeColor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointHighlightFill(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointHighlightStroke(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setDataList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFillColor();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStrokeColor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPointColor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPointStrokeColor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPointHighlightFill();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPointHighlightStroke();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedInt64(
      8,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fill_color = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getFillColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setFillColor = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string stroke_color = 3;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getStrokeColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setStrokeColor = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string point_color = 4;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getPointColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setPointColor = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string point_stroke_color = 5;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getPointStrokeColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setPointStrokeColor = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string point_highlight_fill = 6;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getPointHighlightFill = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setPointHighlightFill = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string point_highlight_stroke = 7;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getPointHighlightStroke = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setPointHighlightStroke = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated int64 data = 8;
 * @return {!Array<number>}
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.getDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<number>} value */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.io.github.benslabbert.trak.grpc.ChartDataSetMessage.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.BrandMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.BrandMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.BrandMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.BrandMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandMessage}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.BrandMessage;
  return proto.io.github.benslabbert.trak.grpc.BrandMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandMessage}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.BrandMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.BrandMessage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.CategoryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.CategoryMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.CategoryMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.CategoryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryMessage}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.CategoryMessage;
  return proto.io.github.benslabbert.trak.grpc.CategoryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryMessage}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.CategoryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.CategoryMessage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.ProductMessage.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ProductMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ProductMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.ProductMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    productUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    id: jspb.Message.getFieldWithDefault(msg, 5, 0),
    brand: (f = msg.getBrand()) && proto.io.github.benslabbert.trak.grpc.BrandMessage.toObject(includeInstance, f),
    categoriesList: jspb.Message.toObjectList(msg.getCategoriesList(),
    proto.io.github.benslabbert.trak.grpc.CategoryMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
  return proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 6:
      var value = new proto.io.github.benslabbert.trak.grpc.BrandMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.BrandMessage.deserializeBinaryFromReader);
      msg.setBrand(value);
      break;
    case 7:
      var value = new proto.io.github.benslabbert.trak.grpc.CategoryMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.CategoryMessage.deserializeBinaryFromReader);
      msg.addCategories(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProductUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBrand();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.io.github.benslabbert.trak.grpc.BrandMessage.serializeBinaryToWriter
    );
  }
  f = message.getCategoriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.io.github.benslabbert.trak.grpc.CategoryMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string product_url = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getProductUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setProductUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string price = 3;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setPrice = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string image_url = 4;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setImageUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 id = 5;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional BrandMessage brand = 6;
 * @return {?proto.io.github.benslabbert.trak.grpc.BrandMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getBrand = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.BrandMessage} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.BrandMessage, 6));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.BrandMessage|undefined} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setBrand = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.clearBrand = function() {
  this.setBrand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.hasBrand = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated CategoryMessage categories = 7;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.CategoryMessage>}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.getCategoriesList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.CategoryMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.CategoryMessage, 7));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.CategoryMessage>} value */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.setCategoriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.addCategories = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.io.github.benslabbert.trak.grpc.CategoryMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.ProductMessage.prototype.clearCategoriesList = function() {
  this.setCategoriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.PageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.PageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.PageResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.PageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.PageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.PageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentPageNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastPageNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalItems: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isLastPage: jspb.Message.getFieldWithDefault(msg, 5, false),
    isFirstPage: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.PageResponse}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.PageResponse;
  return proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.PageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.PageResponse}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentPageNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastPageNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalItems(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPageSize(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLastPage(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFirstPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.PageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.PageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentPageNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLastPageNumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalItems();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIsLastPage();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsFirstPage();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional int64 current_page_number = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getCurrentPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setCurrentPageNumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 last_page_number = 2;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getLastPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setLastPageNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total_items = 3;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getTotalItems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setTotalItems = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 page_size = 4;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_last_page = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getIsLastPage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setIsLastPage = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_first_page = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.getIsFirstPage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.io.github.benslabbert.trak.grpc.PageResponse.prototype.setIsFirstPage = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.LatestResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.LatestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.LatestResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.LatestResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.LatestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.LatestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject, includeInstance),
    page: (f = msg.getPage()) && proto.io.github.benslabbert.trak.grpc.PageResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.LatestResponse}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.LatestResponse;
  return proto.io.github.benslabbert.trak.grpc.LatestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.LatestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.LatestResponse}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = new proto.io.github.benslabbert.trak.grpc.PageResponse;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinaryFromReader);
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.LatestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.LatestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.github.benslabbert.trak.grpc.PageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProductMessage products = 1;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductMessage, 1));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} value */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.github.benslabbert.trak.grpc.ProductMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * optional PageResponse page = 2;
 * @return {?proto.io.github.benslabbert.trak.grpc.PageResponse}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.getPage = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.PageResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.PageResponse, 2));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.PageResponse|undefined} value */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.setPage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.clearPage = function() {
  this.setPage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.LatestResponse.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.PageRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.PageRequestMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.PageRequestMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.PageRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.PageRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageLen: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.PageRequestMessage}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.PageRequestMessage;
  return proto.io.github.benslabbert.trak.grpc.PageRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.PageRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.PageRequestMessage}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageLen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.PageRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.PageRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageLen();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 page_len = 2;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.getPageLen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PageRequestMessage.prototype.setPageLen = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.PromotionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.PromotionRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.PromotionRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.DealCase = {
  DEAL_NOT_SET: 0,
  DAILY_DEAL: 1,
  PROMOTION_ID: 2
};

/**
 * @return {proto.io.github.benslabbert.trak.grpc.PromotionRequest.DealCase}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.getDealCase = function() {
  return /** @type {proto.io.github.benslabbert.trak.grpc.PromotionRequest.DealCase} */(jspb.Message.computeOneofCase(this, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.PromotionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dailyDeal: jspb.Message.getFieldWithDefault(msg, 1, false),
    promotionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pageRequest: (f = msg.getPageRequest()) && proto.io.github.benslabbert.trak.grpc.PageRequestMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionRequest}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.PromotionRequest;
  return proto.io.github.benslabbert.trak.grpc.PromotionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionRequest}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDailyDeal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPromotionId(value);
      break;
    case 3:
      var value = new proto.io.github.benslabbert.trak.grpc.PageRequestMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PageRequestMessage.deserializeBinaryFromReader);
      msg.setPageRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.PromotionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPageRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.io.github.benslabbert.trak.grpc.PageRequestMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool daily_deal = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.getDailyDeal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.setDailyDeal = function(value) {
  jspb.Message.setOneofField(this, 1, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_[0], value);
};


proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.clearDailyDeal = function() {
  jspb.Message.setOneofField(this, 1, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.hasDailyDeal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 promotion_id = 2;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.getPromotionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.setPromotionId = function(value) {
  jspb.Message.setOneofField(this, 2, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_[0], value);
};


proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.clearPromotionId = function() {
  jspb.Message.setOneofField(this, 2, proto.io.github.benslabbert.trak.grpc.PromotionRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.hasPromotionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PageRequestMessage page_request = 3;
 * @return {?proto.io.github.benslabbert.trak.grpc.PageRequestMessage}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.getPageRequest = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.PageRequestMessage} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.PageRequestMessage, 3));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.PageRequestMessage|undefined} value */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.setPageRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.clearPageRequest = function() {
  this.setPageRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PromotionRequest.prototype.hasPageRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.PromotionResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.PromotionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.PromotionResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.PromotionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.PromotionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject, includeInstance),
    pageResponse: (f = msg.getPageResponse()) && proto.io.github.benslabbert.trak.grpc.PageResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionResponse}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.PromotionResponse;
  return proto.io.github.benslabbert.trak.grpc.PromotionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionResponse}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = new proto.io.github.benslabbert.trak.grpc.PageResponse;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinaryFromReader);
      msg.setPageResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.PromotionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter
    );
  }
  f = message.getPageResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.github.benslabbert.trak.grpc.PageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProductMessage products = 1;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductMessage, 1));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} value */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.github.benslabbert.trak.grpc.ProductMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};


/**
 * optional PageResponse page_response = 2;
 * @return {?proto.io.github.benslabbert.trak.grpc.PageResponse}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.getPageResponse = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.PageResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.PageResponse, 2));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.PageResponse|undefined} value */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.setPageResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.clearPageResponse = function() {
  this.setPageResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.PromotionResponse.prototype.hasPageResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.PromotionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.PromotionMessage.displayName = 'proto.io.github.benslabbert.trak.grpc.PromotionMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.PromotionMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    promotionId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    created: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionMessage}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.PromotionMessage;
  return proto.io.github.benslabbert.trak.grpc.PromotionMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionMessage}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPromotionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.PromotionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPromotionId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCreated();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 promotion_id = 3;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.getPromotionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.setPromotionId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 created = 4;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.PromotionMessage.prototype.setCreated = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ProductResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ProductResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.ProductResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ProductResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductResponse}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ProductResponse;
  return proto.io.github.benslabbert.trak.grpc.ProductResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductResponse}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductStatsResponse;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ProductResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProductMessage product = 1;
 * @return {?proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.getProduct = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.ProductMessage} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductMessage, 1));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.ProductMessage|undefined} value */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProductStatsResponse stats = 2;
 * @return {?proto.io.github.benslabbert.trak.grpc.ProductStatsResponse}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.getStats = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.ProductStatsResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductStatsResponse, 2));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.ProductStatsResponse|undefined} value */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.ProductResponse.prototype.hasStats = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ProductRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.ProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductRequest}
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ProductRequest;
  return proto.io.github.benslabbert.trak.grpc.ProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductRequest}
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ProductRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 product_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.ProductRequest.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.ProductRequest.prototype.setProductId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.ProductStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.ProductStatsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    minPrice: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxPrice: jspb.Message.getFieldWithDefault(msg, 2, 0),
    meanPrice: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    chartData: (f = msg.getChartData()) && proto.io.github.benslabbert.trak.grpc.ChartDataMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductStatsResponse}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.ProductStatsResponse;
  return proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductStatsResponse}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMeanPrice(value);
      break;
    case 4:
      var value = new proto.io.github.benslabbert.trak.grpc.ChartDataMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ChartDataMessage.deserializeBinaryFromReader);
      msg.setChartData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinPrice();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxPrice();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMeanPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getChartData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.io.github.benslabbert.trak.grpc.ChartDataMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 min_price = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.getMinPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.setMinPrice = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 max_price = 2;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.getMaxPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.setMaxPrice = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double mean_price = 3;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.getMeanPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.setMeanPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional ChartDataMessage chart_data = 4;
 * @return {?proto.io.github.benslabbert.trak.grpc.ChartDataMessage}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.getChartData = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.ChartDataMessage} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.ChartDataMessage, 4));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.ChartDataMessage|undefined} value */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.setChartData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.clearChartData = function() {
  this.setChartData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.ProductStatsResponse.prototype.hasChartData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.SearchResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.SearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.SearchResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.SearchResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.SearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.io.github.benslabbert.trak.grpc.SearchResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchResponse}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.SearchResponse;
  return proto.io.github.benslabbert.trak.grpc.SearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchResponse}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.SearchResult;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.SearchResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.SearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.SearchResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SearchResult results = 1;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.SearchResult>}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.SearchResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.SearchResult, 1));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.SearchResult>} value */
proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchResult}
 */
proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.github.benslabbert.trak.grpc.SearchResult, opt_index);
};


proto.io.github.benslabbert.trak.grpc.SearchResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.SearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.SearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.SearchResult.displayName = 'proto.io.github.benslabbert.trak.grpc.SearchResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.SearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    score: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchResult}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.SearchResult;
  return proto.io.github.benslabbert.trak.grpc.SearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchResult}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.SearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float score = 3;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.getScore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.SearchResult.prototype.setScore = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.SearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.SearchRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.SearchRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.SearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchRequest}
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.SearchRequest;
  return proto.io.github.benslabbert.trak.grpc.SearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.SearchRequest}
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.SearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.SearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string search = 1;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.SearchRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.SearchRequest.prototype.setSearch = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.BrandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.BrandRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.BrandRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.BrandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    brandId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandRequest}
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.BrandRequest;
  return proto.io.github.benslabbert.trak.grpc.BrandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandRequest}
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBrandId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.BrandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrandId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 brand_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.BrandRequest.prototype.getBrandId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.BrandRequest.prototype.setBrandId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.CategoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.CategoryRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.CategoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.CategoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoryId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryRequest}
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.CategoryRequest;
  return proto.io.github.benslabbert.trak.grpc.CategoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryRequest}
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCategoryId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.CategoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoryId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 category_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.prototype.getCategoryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.CategoryRequest.prototype.setCategoryId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.CategoryResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.CategoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.CategoryResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.CategoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.CategoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoryId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryResponse}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.CategoryResponse;
  return proto.io.github.benslabbert.trak.grpc.CategoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.CategoryResponse}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCategoryId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.CategoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.CategoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoryId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 category_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.getCategoryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.setCategoryId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ProductMessage products = 3;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductMessage, 3));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} value */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.github.benslabbert.trak.grpc.ProductMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.CategoryResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.BrandResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.BrandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.BrandResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.BrandResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.BrandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    brandId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.io.github.benslabbert.trak.grpc.ProductMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandResponse}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.BrandResponse;
  return proto.io.github.benslabbert.trak.grpc.BrandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.BrandResponse}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBrandId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.io.github.benslabbert.trak.grpc.ProductMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.ProductMessage.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.BrandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.BrandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrandId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.io.github.benslabbert.trak.grpc.ProductMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 brand_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.getBrandId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.setBrandId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ProductMessage products = 3;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.ProductMessage, 3));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.ProductMessage>} value */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.setProductsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.ProductMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.ProductMessage}
 */
proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.io.github.benslabbert.trak.grpc.ProductMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.BrandResponse.prototype.clearProductsList = function() {
  this.setProductsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.AddProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.AddProductRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.AddProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.AddProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.AddProductRequest}
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.AddProductRequest;
  return proto.io.github.benslabbert.trak.grpc.AddProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.AddProductRequest}
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.AddProductRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pl_id = 1;
 * @return {string}
 */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.prototype.getPlId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.io.github.benslabbert.trak.grpc.AddProductRequest.prototype.setPlId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.AddProductResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.AddProductResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.AddProductResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.AddProductResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.AddProductResponse}
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.AddProductResponse;
  return proto.io.github.benslabbert.trak.grpc.AddProductResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.AddProductResponse}
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProductId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.AddProductResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.AddProductResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 product_id = 1;
 * @return {number}
 */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.io.github.benslabbert.trak.grpc.AddProductResponse.prototype.setProductId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.displayName = 'proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageRequest: (f = msg.getPageRequest()) && proto.io.github.benslabbert.trak.grpc.PageRequestMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest;
  return proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.PageRequestMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PageRequestMessage.deserializeBinaryFromReader);
      msg.setPageRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.PageRequestMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional PageRequestMessage page_request = 1;
 * @return {?proto.io.github.benslabbert.trak.grpc.PageRequestMessage}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.getPageRequest = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.PageRequestMessage} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.PageRequestMessage, 1));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.PageRequestMessage|undefined} value */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.setPageRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.clearPageRequest = function() {
  this.setPageRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsRequest.prototype.hasPageRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.repeatedFields_, null);
};
goog.inherits(proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.displayName = 'proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    promotionsList: jspb.Message.toObjectList(msg.getPromotionsList(),
    proto.io.github.benslabbert.trak.grpc.PromotionMessage.toObject, includeInstance),
    pageResponse: (f = msg.getPageResponse()) && proto.io.github.benslabbert.trak.grpc.PageResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse;
  return proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.io.github.benslabbert.trak.grpc.PromotionMessage;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PromotionMessage.deserializeBinaryFromReader);
      msg.addPromotions(value);
      break;
    case 2:
      var value = new proto.io.github.benslabbert.trak.grpc.PageResponse;
      reader.readMessage(value,proto.io.github.benslabbert.trak.grpc.PageResponse.deserializeBinaryFromReader);
      msg.setPageResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPromotionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.io.github.benslabbert.trak.grpc.PromotionMessage.serializeBinaryToWriter
    );
  }
  f = message.getPageResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.io.github.benslabbert.trak.grpc.PageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PromotionMessage promotions = 1;
 * @return {!Array<!proto.io.github.benslabbert.trak.grpc.PromotionMessage>}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.getPromotionsList = function() {
  return /** @type{!Array<!proto.io.github.benslabbert.trak.grpc.PromotionMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.io.github.benslabbert.trak.grpc.PromotionMessage, 1));
};


/** @param {!Array<!proto.io.github.benslabbert.trak.grpc.PromotionMessage>} value */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.setPromotionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.io.github.benslabbert.trak.grpc.PromotionMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.io.github.benslabbert.trak.grpc.PromotionMessage}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.addPromotions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.io.github.benslabbert.trak.grpc.PromotionMessage, opt_index);
};


proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.clearPromotionsList = function() {
  this.setPromotionsList([]);
};


/**
 * optional PageResponse page_response = 2;
 * @return {?proto.io.github.benslabbert.trak.grpc.PageResponse}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.getPageResponse = function() {
  return /** @type{?proto.io.github.benslabbert.trak.grpc.PageResponse} */ (
    jspb.Message.getWrapperField(this, proto.io.github.benslabbert.trak.grpc.PageResponse, 2));
};


/** @param {?proto.io.github.benslabbert.trak.grpc.PageResponse|undefined} value */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.setPageResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.clearPageResponse = function() {
  this.setPageResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.io.github.benslabbert.trak.grpc.GetAllPromotionsResponse.prototype.hasPageResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.io.github.benslabbert.trak.grpc);
